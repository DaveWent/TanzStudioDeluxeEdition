/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.CVistaConsultaEspesifica;
import Interfaces.ICierraVentana;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableModel;
import Interfaces.IEdad;
import Interfaces.IConsultaEspesifica;
import Interfaces.ICambioModificacion;

/**
 *
 * @author cristian
 */
public class VConsultaEspecifica extends javax.swing.JFrame implements 
        IConsultaEspesifica, ICambioModificacion, IEdad, 
        ActionListener, ICierraVentana {

    /**-
     * Creates new form ConsultaEspesifica
     */
    private jpDatosAlumno jpDatosAlumno = null;
    private jpSeleccionMaterias jpSeleccionMaterias = null;
    private jpDatosProgenitores jpDatosProgenitores = null;
    private jpDatosEncuesta jpDatosEncuesta = null;
    String[] cursos;
    String[] clases;
    private int panel = 1;
    private boolean validad = false;
    private boolean modifica = false;

    CVistaConsultaEspesifica control;
    ArrayList alalumno = null;
    ArrayList alsalud = null;
    ArrayList almadre = null;
    ArrayList alpadre = null;
    ArrayList alencuesta = null;
    ArrayList alescolaridad = null;

    public VConsultaEspecifica(int matricula) throws Exception {
        initComponents();
        inicializar();
        System.out.println("");
        control = new CVistaConsultaEspesifica(matricula, this, this,this);
        control.cargarDatos();
        jTabbedPane1.add(jpDatosAlumno, "Datos del alumno");
        jpDatosAlumno.CargarAlumno(alalumno);
        if (alsalud != null) {
            jpDatosAlumno.getRbSiProblema().setSelected(true);
            jpDatosAlumno.mostrarProblema();
            jpDatosAlumno.cargarSalud(alsalud);
        }

        if (cursos != null) {
            jpSeleccionMaterias = new jpSeleccionMaterias();
            jTabbedPane1.add(jpSeleccionMaterias, "Cursos y clases");
            control.actualizaComboBoxCurso(jpSeleccionMaterias.getCbCurso());
            control.actualizaComboBoxClase(jpSeleccionMaterias.getCbClase(),
                    (String) jpSeleccionMaterias.getCbCurso().getSelectedItem());
            jpSeleccionMaterias.getBtAgregar().addActionListener(this);
            jpSeleccionMaterias.getBtQuitar().addActionListener(this);

        }
        if (clases != null) {
            control.InicializaTabla(clases);
        }

        if (alpadre != null || almadre != null) {

            jpDatosProgenitores = new jpDatosProgenitores();
            jTabbedPane1.add(jpDatosProgenitores, "Datos de progenitores");
            jpDatosProgenitores.cargarDatosEscolaridad(alescolaridad);
        }
        if (almadre != null) {

            jpDatosProgenitores.cargarDatosMadre(almadre);
            jpDatosProgenitores.cargarDatosEscolaridad(alescolaridad);
        }
        if (alpadre != null) {
            jpDatosProgenitores.cargarDatosPadre(alpadre);
        }

        jpDatosEncuesta.cargarEncuesta(alencuesta);
        jTabbedPane1.add(jpDatosEncuesta, "Datos de encuesta");
        jpDatosAlumno.Modificable(false);
        jpDatosEncuesta.Modificable(false);

        if (jpDatosProgenitores != null) {
            jpDatosProgenitores.modificable(false);
        }
        validad = true;

    }

    public void inicializar() {
        //  jpDatosProgenitores = new PaneDatosProgenitores();
        jpDatosAlumno = new jpDatosAlumno(this);
        jpDatosEncuesta = new jpDatosEncuesta();

    }

    public void CargarSalud(ArrayList salud) {
        salud.add("CANCER");
        salud.add("SI");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        btAceptar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        btModificar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Consulta Espesifica de alumno");

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        btAceptar.setText("Aceptar");
        btAceptar.setEnabled(false);
        btAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAceptarActionPerformed(evt);
            }
        });

        btCancelar.setText("Cancelar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        btModificar.setText("Modificar");
        btModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed

        int opcion = JOptionPane.showConfirmDialog(null, "¿Está seguro de que quiere cancelar?",
                "Borrado de profesor", JOptionPane.YES_NO_OPTION);
        if (opcion == 0) {
            dispose();
        }
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btModificarActionPerformed

        jpDatosAlumno.Modificable(true);
        jpDatosEncuesta.Modificable(true);
        if (jpDatosProgenitores != null) {
            jpDatosProgenitores.modificable(true);
        }
        btAceptar.setEnabled(true);
        modifica = true;

    }//GEN-LAST:event_btModificarActionPerformed

    private void btAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAceptarActionPerformed

        int contador = 0;
        if (validad && modifica) {
            ArrayList alDatosAlumno = jpDatosAlumno.getAlumno();
            ArrayList alNombreAlumno = jpDatosAlumno.getAlumnoNombre();
            ArrayList alTipoAlumno = jpDatosAlumno.getAlumnoTipo();

            boolean salud = jpDatosAlumno.getRbSiProblema().isSelected();
            ArrayList alDatosSalud = jpDatosAlumno.getSalud();
            ArrayList alNombreSalud = jpDatosAlumno.getSaludNombre();
            ArrayList alTipoSalud = jpDatosAlumno.getSaludTipo();
            control.validaTabla((DefaultTableModel) jpSeleccionMaterias.getTbCursos().getModel());
            control.validaPanelDatosAlumno(alDatosAlumno, alNombreAlumno,
                    alTipoAlumno, alDatosSalud, alNombreSalud, alTipoSalud, salud);

        } else {
            validad = true;
            contador++;
        }
        if (jpDatosProgenitores != null) {
            if (validad && modifica) {
                ArrayList alDatosPadre = jpDatosProgenitores.getPadre();
                ArrayList alDatosMadre = jpDatosProgenitores.getMadre();
                ArrayList alNombreProgenitor = jpDatosProgenitores.getProgenitorNombre();
                ArrayList alTipoProgenitor = jpDatosProgenitores.getProgenitorTipo();
                ArrayList alDatosEscolaridad = jpDatosProgenitores.getEscolaridad();
                ArrayList alNombreEscolaridad = jpDatosProgenitores.getEscolaridadNombre();
                ArrayList alTipoEscolaridad = jpDatosProgenitores.getEscolaridadTipo();

                control.validaPanelDatosProgenitores(alDatosMadre, alDatosPadre,
                        alNombreProgenitor, alTipoProgenitor, alDatosEscolaridad,
                        alNombreEscolaridad, alTipoEscolaridad);
            } else {
                validad = true;
                contador++;
            }
        }

        if (validad && modifica) {
            ArrayList alDatosEncuesta = jpDatosEncuesta.getEncuesta();
            ArrayList alNombresEncuesta = jpDatosEncuesta.getEncuestaNombre();
            ArrayList alTipoEncuesta = jpDatosEncuesta.getEncuestaTipo();
            control.validaPaneDatoslEncuesta(alDatosEncuesta, alNombresEncuesta, alTipoEncuesta);
        } else {
            validad = false;
            contador++;
        }
        if (contador == 0) {
            control.modificacion();
        }
        contador = 0;
    }//GEN-LAST:event_btAceptarActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged

        switch (panel) {
            case 1://Panel datos alumno
                if (validad && modifica) {
                    ArrayList alDatosAlumno = jpDatosAlumno.getAlumno();
                    ArrayList alNombreAlumno = jpDatosAlumno.getAlumnoNombre();
                    ArrayList alTipoAlumno = jpDatosAlumno.getAlumnoTipo();

                    boolean salud = jpDatosAlumno.getRbSiProblema().isSelected();
                    ArrayList alDatosSalud = jpDatosAlumno.getSalud();
                    ArrayList alNombreSalud = jpDatosAlumno.getSaludNombre();
                    ArrayList alTipoSalud = jpDatosAlumno.getSaludTipo();

                    control.validaPanelDatosAlumno(alDatosAlumno, alNombreAlumno,
                            alTipoAlumno, alDatosSalud, alNombreSalud, alTipoSalud, salud);

                } else {
                    validad = true;
                }
                break;
            case 2://Panel datos del padre
                if (validad && modifica) {
                    ArrayList alDatosPadre = jpDatosProgenitores.getPadre();
                    ArrayList alDatosMadre = jpDatosProgenitores.getMadre();
                    ArrayList alNombreProgenitor = jpDatosProgenitores.getProgenitorNombre();
                    ArrayList alTipoProgenitor = jpDatosProgenitores.getProgenitorTipo();
                    ArrayList alDatosEscolaridad = jpDatosProgenitores.getEscolaridad();
                    ArrayList alNombreEscolaridad = jpDatosProgenitores.getEscolaridadNombre();
                    ArrayList alTipoEscolaridad = jpDatosProgenitores.getEscolaridadTipo();

                    control.validaPanelDatosProgenitores(alDatosMadre, alDatosPadre,
                            alNombreProgenitor, alTipoProgenitor, alDatosEscolaridad,
                            alNombreEscolaridad, alTipoEscolaridad);
                } else {
                    validad = true;
                }
                break;
            case 3://panel datos encuesta
                if (validad && modifica) {
                    ArrayList alDatosEncuesta = jpDatosEncuesta.getEncuesta();
                    ArrayList alNombresEncuesta = jpDatosEncuesta.getEncuestaNombre();
                    ArrayList alTipoEncuesta = jpDatosEncuesta.getEncuestaTipo();
                    control.validaPaneDatoslEncuesta(alDatosEncuesta, alNombresEncuesta, alTipoEncuesta);
                } else {
                    validad = false;
                }
                break;
        }
        if (jTabbedPane1.indexOfTab("Datos del alumno") == jTabbedPane1.getSelectedIndex()) {
            panel = 1;
            System.out.println("1");
        }
        if (jTabbedPane1.indexOfTab("Datos de progenitores") == jTabbedPane1.getSelectedIndex()) {
            panel = 2;
            System.out.println("2");
        }
        if (jTabbedPane1.indexOfTab("Datos de encuesta") == jTabbedPane1.getSelectedIndex()) {
            panel = 3;
            System.out.println("3");
        }
        //  }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VConsultaEspecifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VConsultaEspecifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VConsultaEspecifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VConsultaEspecifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new VConsultaEspecifica(37).setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(VConsultaEspecifica.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAceptar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btModificar;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void escribirAlumno(ArrayList alumno) {
        this.alalumno = alumno;
    }

    @Override
    public void escribirSalud(ArrayList salud) {
        this.alsalud = salud;
    }

    @Override
    public void escribirMadre(ArrayList madre) {
        this.almadre = madre;
    }

    @Override
    public void escribirPadre(ArrayList padre) {
        this.alpadre = padre;
    }

    @Override
    public void escribirEncuesta(ArrayList encuesta) {
        this.alencuesta = encuesta;
    }

    @Override
    public void escribirEscolaridad(ArrayList escolaridad) {
        this.alescolaridad = escolaridad;
    }

    @Override
    public void escribirCursos(String[] cursos) {
        this.cursos = cursos;

    }

    @Override
    public void escribirClases(String[] clases) {
        this.clases = clases;

    }

    @Override
    public void enviarTabla(DefaultTableModel modelo) {
        System.out.println("Envieee la tablaaaaaa!!sssAAAaaAA");
        jpSeleccionMaterias.getTbCursos().setModel(modelo);
    }

    @Override
    public void seleccionaPanelDatosAlumno() {
        validad = false;
        jTabbedPane1.setSelectedComponent(jpDatosAlumno);

    }

    @Override
    public void seleccionaPanelDatosProgenitores() {
        validad = false;
        jTabbedPane1.setSelectedComponent(jpDatosProgenitores);
    }

    @Override
    public void seleccionaPanelDatosEnceusta() {
        validad = false;
        jTabbedPane1.setSelectedComponent(jpDatosEncuesta);
    }

    @Override
    public void enviarEdad(int edad) {

        if (jpDatosProgenitores == null && edad < 18 && modifica) {
            System.out.println("-------------------!!me ejecute!!!----------------------------");
            jpDatosProgenitores = new jpDatosProgenitores();
            jTabbedPane1.add(jpDatosProgenitores, "Datos de Progenitores");
            System.out.println("entreeeeeeee");
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == jpSeleccionMaterias.getBtAgregar()) {
            String cursoSe = (String) jpSeleccionMaterias.getCbCurso().getSelectedItem();
            String claseSe = (String) jpSeleccionMaterias.getCbClase().getSelectedItem();
            control.AgregarRenglon(cursoSe, claseSe, (DefaultTableModel) 
                    jpSeleccionMaterias.getTbCursos().getModel());
        }
        if (e.getSource() == jpSeleccionMaterias.getBtQuitar()) {
            int fila = jpSeleccionMaterias.getFila();
            if (fila != -1) {
                control.eliminarRenglon(fila, (DefaultTableModel) jpSeleccionMaterias.getTbCursos().getModel());
                fila=-1;
            }
        }
    }

    public void cerrarVentana() {
        dispose();
    }

}
