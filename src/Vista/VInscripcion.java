package Vista;

import Controlador.CVistaInscripcion;
import Interfaces.ICierraVentana;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import Interfaces.ICambio;

/**
 *
 * @author Dave Went
 */
public class VInscripcion extends javax.swing.JFrame implements ICambio, 
        ItemListener, ActionListener,ICierraVentana {

    CVistaInscripcion control;
    private int panel = 1;

    /**
     * Creates new form Inscripcion
     */
    public VInscripcion() throws Exception {
        initComponents();
        iniciarPaneles();
        setLocationRelativeTo(null);
        control = new CVistaInscripcion(this,this);
        control.inicializarTabla(jpSeleccionMaterias.getTbCursos());
        control.actualizaComboBoxCurso(jpSeleccionMaterias.getCbCurso());
        control.actualizaComboBoxClases(jpSeleccionMaterias.getCbClase(),
                (String) jpSeleccionMaterias.getCbCurso().getSelectedItem());
        jpSeleccionMaterias.getCbCurso().addItemListener(this);
        jpSeleccionMaterias.getBtAgregar().addActionListener(this);
        jpSeleccionMaterias.getBtQuitar().addActionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barra = new javax.swing.JProgressBar();
        btSiguiente = new javax.swing.JButton();
        btAnterior = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Inscripcion");
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        getContentPane().setLayout(null);

        barra.setMaximumSize(new java.awt.Dimension(300, 20));
        barra.setMinimumSize(new java.awt.Dimension(300, 20));
        barra.setPreferredSize(new java.awt.Dimension(300, 20));
        getContentPane().add(barra);
        barra.setBounds(200, 10, 300, 25);

        btSiguiente.setText("Siguiente");
        btSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSiguienteActionPerformed(evt);
            }
        });
        getContentPane().add(btSiguiente);
        btSiguiente.setBounds(420, 530, 120, 30);

        btAnterior.setText("Anterior");
        btAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnteriorActionPerformed(evt);
            }
        });
        getContentPane().add(btAnterior);
        btAnterior.setBounds(160, 530, 120, 30);

        btCancelar.setText("Cancelar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(btCancelar);
        btCancelar.setBounds(290, 530, 120, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /***
     * Metodo que se encarga de todas las acciones que se realizan cuando se presiona
     * el boton siguiente
     * @param evt 
     */
    private void btSiguienteActionPerformed(java.awt.event.ActionEvent evt) {
        switch (panel) {
            case 1:
                ArrayList alDatosAlumno = jpDatosAlumno.getAlumno();
                ArrayList alNombreAlumno = jpDatosAlumno.getAlumnoNombre();
                ArrayList alTipoAlumno = jpDatosAlumno.getAlumnoTipo();

                boolean salud = jpDatosAlumno.getRbSiProblema().isSelected();
                ArrayList alDatosSalud = jpDatosAlumno.getSalud();
                ArrayList alNombreSalud = jpDatosAlumno.getSaludNombre();
                ArrayList alTipoSalud = jpDatosAlumno.getSaludTipo();

                control.validaPanelDatosAlumno(alDatosAlumno, alNombreAlumno,
                        alTipoAlumno, alDatosSalud, alNombreSalud, alTipoSalud, salud);
                break;
            case 2:
                JTable btCurso = jpSeleccionMaterias.getTbCursos();
                try {
                    control.validarPanelSeleccionCursos(btCurso);
                } catch (SQLException ex) {
                    Logger.getLogger(VInscripcion.class.getName()).log(Level.SEVERE, null, ex);
                }

                break;
            case 3:
                ArrayList alDatosPadre = jpDatosProgenitores.getPadre();
                ArrayList alDatosMadre = jpDatosProgenitores.getMadre();
                ArrayList alNombreProgenitor = jpDatosProgenitores.getProgenitorNombre();
                ArrayList alTipoProgenitor = jpDatosProgenitores.getProgenitorTipo();
                ArrayList alDatosEscolaridad = jpDatosProgenitores.getEscolaridad();
                ArrayList alNombreEscolaridad = jpDatosProgenitores.getEscolaridadNombre();
                ArrayList alTipoEscolaridad = jpDatosProgenitores.getEscolaridadTipo();

                control.validaPanelDatosProgenitores(alDatosMadre, alDatosPadre,
                        alNombreProgenitor, alTipoProgenitor, alDatosEscolaridad,
                        alNombreEscolaridad, alTipoEscolaridad);
                break;
            case 4:
                ArrayList alDatosEncuesta = jpDatosEncuesta.getEncuesta();
                ArrayList alNombresEncuesta = jpDatosEncuesta.getEncuestaNombre();
                ArrayList alTipoEncuesta = jpDatosEncuesta.getEncuestaTipo();
                control.validaPaneDatoslEncuesta(alDatosEncuesta, alNombresEncuesta, alTipoEncuesta);
                break;
        }
    }//GEN-LAST:event_bSiguienteActionPerformed

    /***
     * Metodo que se encarga de cerrar la ventana cuando se presiona el boton siguiente 
     * @param evt 
     */
    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarActionPerformed
        int opcion = JOptionPane.showConfirmDialog(null, "¿Está seguro de cancelar?",
                "Cancelar alta de profesor", JOptionPane.YES_NO_OPTION);
        if (opcion == 0) {
            dispose();
        }
    }//GEN-LAST:event_bCancelarActionPerformed

    /***
     * Meodo que se encarga de retroceder e los paneles 
     * @param evt 
     */
    private void btAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAnteriorActionPerformed
        control.cambioPanel(panel);
    }//GEN-LAST:event_bAnteriorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VInscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VInscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VInscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VInscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new VInscripcion().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(VInscripcion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAnterior;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btSiguiente;
    private javax.swing.JProgressBar barra;
    // End of variables declaration//GEN-END:variables
    private jpDatosAlumno jpDatosAlumno;
    private jpDatosProgenitores jpDatosProgenitores;
    private jpSeleccionMaterias jpSeleccionMaterias;
    private jpDatosEncuesta jpDatosEncuesta;

    /***
     * Metodo que se encarga de crear todos los paneles con sus dimensiones y 
     * agregarlos a la ventana
     */
    private void iniciarPaneles() {
        jpDatosAlumno = new jpDatosAlumno();
        jpDatosAlumno.setBounds(8, 30, 790, 500);
        add(jpDatosAlumno);
        jpDatosAlumno.setVisible(true);

        jpDatosProgenitores = new jpDatosProgenitores();
        jpDatosProgenitores.setBounds(8, 30, 790, 500);
        add(jpDatosProgenitores);
        jpDatosProgenitores.setVisible(false);

        jpSeleccionMaterias = new jpSeleccionMaterias();
        jpSeleccionMaterias.setBounds(8, 30, 790, 500);
        add(jpSeleccionMaterias);
        jpSeleccionMaterias.setVisible(false);

        jpDatosEncuesta = new jpDatosEncuesta();
        jpDatosEncuesta.setBounds(0, 30, 790, 500);
        add(jpDatosEncuesta);
        jpDatosEncuesta.setVisible(false);
        btAnterior.setVisible(false);
    }

    /***
     * Metodo que hace visible el panel de datosDatosAlumno
     */
    public void cambioPanelDatosAlumno() {
        panel = 1;
        jpDatosAlumno.setVisible(true);
        jpDatosProgenitores.setVisible(false);
        jpSeleccionMaterias.setVisible(false);
        jpDatosEncuesta.setVisible(false);
        btAnterior.setVisible(false);
    }

    /**
     * Este metodo hace visible el panel datos de progenitores y invisible los
     * demas, actualiza el contador del panel y la barra de progreso
     */
    public void cambioPanelDatosProgenitores() {
        panel = 3;
        barra.setValue(60);
        jpDatosAlumno.setVisible(false);
        jpDatosProgenitores.setVisible(true);
        jpSeleccionMaterias.setVisible(false);
        jpDatosEncuesta.setVisible(false);
        btAnterior.setVisible(true);
        btSiguiente.setText("Siguiente");
    }

    /**
     * 
     * Este metodo hace visible el panel seleccion de materias y invisible los
     * demas, actualiza el contador del panel y la barra de progreso
     */
    public void cambioPanelSeleccionMaterias() {
        panel = 2;
        barra.setValue(30);
        jpDatosAlumno.setVisible(false);
        jpDatosProgenitores.setVisible(false);
        jpSeleccionMaterias.setVisible(true);
        jpDatosEncuesta.setVisible(false);
        btAnterior.setVisible(true);
        btSiguiente.setText("Siguiente");
    }

    /***
     *Este metodo hace visible el panelDatosEncuesta y invisible los
     * demas, actualiza el contador del panel y la barra de progreso
     */
    public void cambioPanelDatosEncuesta() {
        panel = 4;
        barra.setValue(87);
        jpDatosAlumno.setVisible(false);
        jpDatosProgenitores.setVisible(false);
        jpSeleccionMaterias.setVisible(false);
        jpDatosEncuesta.setVisible(true);
        btSiguiente.setText("Aceptar");
        System.out.println("esta llegando ahi");
    }

    /**
     * Metodo que se encarga de  ingresar los datos de los cursos en el combobox
     * de cbCursos
     * @param comboBoxCursos 
     */
    public void actualizaComboBoxCurso(JComboBox comboBoxCursos) {
        jpSeleccionMaterias.setCbCurso(comboBoxCursos);
    }

    /**
     * Metodo que se encarga de  ingresar los datos de las clases en el combobox
     * cbClases
     * @param comboBoxClases 
     */
    public void actualizaComboBoxClases(JComboBox comboBoxClases) {
        jpSeleccionMaterias.setCbClase(comboBoxClases);
    }

    /***
     * Metodo que se encarga de las acciones a realizar dependindo de quien geere
     * el evento ItemStateChanged
     * @param ie 
     */
    public void itemStateChanged(ItemEvent ie) {
        try {
            //identifica si cbCursos genero la accion
            if (ie.getSource() == jpSeleccionMaterias.getCbCurso()) {
                //identifica si cbCurso genero la accion
                control.actualizaComboBoxClases(jpSeleccionMaterias.getCbClase(),
                        (String) jpSeleccionMaterias.getCbCurso().getSelectedItem());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(),
                    null, JOptionPane.ERROR_MESSAGE, null);
        }
    }

     /***
     * Metodo que se encarga de las acciones a realizar dependindo de quien geere
     * el evento actionPerformed
     * @param ae 
     */
    public void actionPerformed(ActionEvent ae) {
        //identifica si el que genero el evento fue el boton agregar
        if (ae.getSource() == jpSeleccionMaterias.getBtAgregar()) {
            String curso = (String) jpSeleccionMaterias.getCbCurso().getSelectedItem();
            String clase = (String) jpSeleccionMaterias.getCbClase().getSelectedItem();
            control.actualizaTabla(curso, clase, jpSeleccionMaterias.getTbCursos());
        }

        //identifica si el que genero el evento fue el boton quitar 
        if (ae.getSource() == jpSeleccionMaterias.getBtQuitar()) {
            int fila = jpSeleccionMaterias.getFila();
            if (fila != -1) {
                control.eliminarFila(fila, jpSeleccionMaterias.getTbCursos());
            }

        }
    }

    /***
     * Inicializa el contenido de la tabla
     * @param tbCurso 
     */
    public void inicializarTabla(JTable tbCurso) {
        jpSeleccionMaterias.setTbCursos(tbCurso);
    }

    /**
     * Actualiza el contenido de la tabla 
     * @param tbCurso 
     */
    public void actualizarTabla(JTable tbCurso) {
        jpSeleccionMaterias.setTbCursos(tbCurso);
    }

    public void enviarMatricula(String matriula) {
        jpDatosAlumno.getTxMatricula().setText(matriula);
    }

    public void cerrarVentana() {
        dispose();
    }
}
